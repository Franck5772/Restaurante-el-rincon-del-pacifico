"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ultravox-client@0.3.2";
exports.ids = ["vendor-chunks/ultravox-client@0.3.2"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/ultravox-client@0.3.2/node_modules/ultravox-client/dist/esm/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ultravox-client@0.3.2/node_modules/ultravox-client/dist/esm/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Medium: () => (/* binding */ Medium),\n/* harmony export */   Role: () => (/* binding */ Role),\n/* harmony export */   Transcript: () => (/* binding */ Transcript),\n/* harmony export */   UltravoxExperimentalMessageEvent: () => (/* binding */ UltravoxExperimentalMessageEvent),\n/* harmony export */   UltravoxSession: () => (/* binding */ UltravoxSession),\n/* harmony export */   UltravoxSessionStatus: () => (/* binding */ UltravoxSessionStatus),\n/* harmony export */   UltravoxSessionStatusChangedEvent: () => (/* binding */ UltravoxSessionStatusChangedEvent),\n/* harmony export */   UltravoxTranscriptsChangedEvent: () => (/* binding */ UltravoxTranscriptsChangedEvent)\n/* harmony export */ });\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/.pnpm/livekit-client@2.5.2/node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n\n/* The current status of an UltravoxSession. */\nvar UltravoxSessionStatus;\n(function (UltravoxSessionStatus) {\n    /* The session is not connected and not attempting to connect. This is the initial state. */\n    UltravoxSessionStatus[\"DISCONNECTED\"] = \"disconnected\";\n    /* The client is disconnecting from the session. */\n    UltravoxSessionStatus[\"DISCONNECTING\"] = \"disconnecting\";\n    /* The client is attempting to connect to the session. */\n    UltravoxSessionStatus[\"CONNECTING\"] = \"connecting\";\n    /* The client is connected to the session and the server is warming up. */\n    UltravoxSessionStatus[\"IDLE\"] = \"idle\";\n    /* The client is connected and the server is listening for voice input. */\n    UltravoxSessionStatus[\"LISTENING\"] = \"listening\";\n    /* The client is connected and the server is considering its response. The user can still interrupt. */\n    UltravoxSessionStatus[\"THINKING\"] = \"thinking\";\n    /* The client is connected and the server is playing response audio. The user can interrupt as needed. */\n    UltravoxSessionStatus[\"SPEAKING\"] = \"speaking\";\n})(UltravoxSessionStatus || (UltravoxSessionStatus = {}));\n/* The participant responsible for an utterance. */\nvar Role;\n(function (Role) {\n    Role[\"USER\"] = \"user\";\n    Role[\"AGENT\"] = \"agent\";\n})(Role || (Role = {}));\n/* How a message was communicated. */\nvar Medium;\n(function (Medium) {\n    Medium[\"VOICE\"] = \"voice\";\n    Medium[\"TEXT\"] = \"text\";\n})(Medium || (Medium = {}));\n/** A transcription of a single utterance. */\nclass Transcript {\n    text;\n    isFinal;\n    speaker;\n    medium;\n    constructor(\n    /* The possibly-incomplete text of an utterance. */\n    text, \n    /* Whether the text is complete or the utterance is ongoing. */\n    isFinal, \n    /* Who emitted the utterance. */\n    speaker, \n    /* The medium through which the utterance was emitted. */\n    medium) {\n        this.text = text;\n        this.isFinal = isFinal;\n        this.speaker = speaker;\n        this.medium = medium;\n    }\n}\n/* Event emitted by an UltravoxSession when its status changes. */\nclass UltravoxSessionStatusChangedEvent extends Event {\n    constructor() {\n        super('status');\n    }\n}\n/* Event emitted by an UltravoxSession when its transcripts change. */\nclass UltravoxTranscriptsChangedEvent extends Event {\n    constructor() {\n        super('transcripts');\n    }\n}\n/* Event emitted by an UltravoxSession when an experimental message is received. */\nclass UltravoxExperimentalMessageEvent extends Event {\n    message;\n    constructor(message) {\n        super('experimental_message');\n        this.message = message;\n    }\n}\n/**\n * Manages a single session with Ultravox and emits events to notify consumers of\n * state changes. The following events are emitted:\n *\n * - status: The status of the session has changed.\n * - transcripts: A transcript was added or updated.\n * - experimental_message: An experimental message was received. The message is included in the event.\n *\n */\nclass UltravoxSession extends EventTarget {\n    static CONNECTED_STATUSES = new Set([\n        UltravoxSessionStatus.LISTENING,\n        UltravoxSessionStatus.THINKING,\n        UltravoxSessionStatus.SPEAKING,\n    ]);\n    _transcripts = [];\n    _status = UltravoxSessionStatus.DISCONNECTED;\n    registeredTools = new Map();\n    socket;\n    room;\n    audioElement = new Audio();\n    localAudioTrack;\n    micSourceNode;\n    agentSourceNode;\n    delayedSpeakingState = false;\n    textDecoder = new TextDecoder();\n    textEncoder = new TextEncoder();\n    audioContext;\n    experimentalMessages;\n    _isMicMuted = false;\n    _isSpeakerMuted = false;\n    /**\n     * Constructor for UltravoxSession.\n     * @param audioContext An AudioContext to use for audio processing. If not provided, a new AudioContext will be created.\n     * @param experimentalMessages A set of experimental message types to enable. Empty by default.\n     */\n    constructor({ audioContext, experimentalMessages, } = {}) {\n        super();\n        this.audioContext = audioContext || new AudioContext();\n        this.experimentalMessages = experimentalMessages || new Set();\n    }\n    /** Returns all transcripts for the current session. */\n    get transcripts() {\n        return [...this._transcripts];\n    }\n    /** Returns the session's current status. */\n    get status() {\n        return this._status;\n    }\n    /**\n     * Indicates whether the user's mic is currently muted for the session. (Does not inspect\n     * hardware state.)\n     */\n    get isMicMuted() {\n        return this._isMicMuted;\n    }\n    /**\n     * Indicates whether the user's speaker (e.g. agent output audio) is currently muted for the\n     * session. (Does not inspect system volume or hardware state.)\n     */\n    get isSpeakerMuted() {\n        return this._isSpeakerMuted;\n    }\n    /**\n     * Registers a client tool implementation with the given name. If the call is\n     * started with a client-implemented tool, this implementation will be invoked\n     * when the model calls the tool.\n     *\n     * See https://docs.ultravox.ai/tools for more information.\n     */\n    registerToolImplementation(name, implementation) {\n        this.registeredTools.set(name, implementation);\n    }\n    /** Convenience batch wrapper for registerToolImplementation. */\n    registerToolImplementations(implementationMap) {\n        for (const [name, implementation] of Object.entries(implementationMap)) {\n            this.registerToolImplementation(name, implementation);\n        }\n    }\n    /** Connects to a call using the given joinUrl. */\n    joinCall(joinUrl) {\n        if (this._status !== UltravoxSessionStatus.DISCONNECTED) {\n            throw new Error('Cannot join a new call while already in a call');\n        }\n        if (this.experimentalMessages) {\n            const url = new URL(joinUrl);\n            url.searchParams.set('experimentalMessages', Array.from(this.experimentalMessages.values()).join(','));\n            joinUrl = url.toString();\n        }\n        this.setStatus(UltravoxSessionStatus.CONNECTING);\n        this.socket = new WebSocket(joinUrl);\n        this.socket.onmessage = (event) => this.handleSocketMessage(event);\n        this.socket.onclose = (event) => this.handleSocketClose(event);\n    }\n    /** Leaves the current call (if any). */\n    async leaveCall() {\n        await this.disconnect();\n    }\n    /**\n     * Sets the agent's output medium. If the agent is currently speaking, this will take effect at\n     * the end of the agent's utterance. Also see muteSpeaker and unmuteSpeaker below.\n     */\n    setOutputMedium(medium) {\n        if (!UltravoxSession.CONNECTED_STATUSES.has(this._status)) {\n            throw new Error(`Cannot set output medium while not connected. Current status is ${this._status}.`);\n        }\n        this.sendData({ type: 'set_output_medium', medium });\n    }\n    /** Sends a message via text. */\n    sendText(text) {\n        if (!UltravoxSession.CONNECTED_STATUSES.has(this._status)) {\n            throw new Error(`Cannot send text while not connected. Current status is ${this._status}.`);\n        }\n        this.sendData({ type: 'input_text_message', text });\n    }\n    /** Mutes audio input from the user. */\n    muteMic() {\n        if (!this.room?.localParticipant) {\n            throw new Error('Cannot muteMic.');\n        }\n        this._isMicMuted = true;\n        this.room.localParticipant.setMicrophoneEnabled(false);\n    }\n    /** Unmutes audio input from the user. */\n    unmuteMic() {\n        if (!this.room?.localParticipant) {\n            throw new Error('Cannot unmuteMic.');\n        }\n        this._isMicMuted = false;\n        this.room.localParticipant.setMicrophoneEnabled(true);\n    }\n    /** Toggles the mute state of the user's audio input. */\n    toggleMicMute() {\n        if (!this.room?.localParticipant) {\n            throw new Error('Cannot toggle mic mute.');\n        }\n        if (this.isMicMuted) {\n            this.unmuteMic();\n        }\n        else {\n            this.muteMic();\n        }\n    }\n    /** Mutes audio output from the agent. */\n    muteSpeaker() {\n        if (!this.room?.remoteParticipants) {\n            throw new Error('Cannot muteSpeaker.');\n        }\n        this._isSpeakerMuted = true;\n        this.room.remoteParticipants.forEach((participant) => {\n            participant.audioTrackPublications.forEach((publication) => {\n                publication.track?.setMuted(true);\n            });\n        });\n    }\n    /** Unmutes audio output from the agent. */\n    unmuteSpeaker() {\n        if (!this.room?.remoteParticipants) {\n            throw new Error('Cannot unmuteSpeaker.');\n        }\n        this._isSpeakerMuted = false;\n        this.room.remoteParticipants.forEach((participant) => {\n            participant.audioTrackPublications.forEach((publication) => {\n                publication.track?.setMuted(false);\n            });\n        });\n    }\n    /** Toggles the mute state of the agent's output audio. */\n    toggleSpeakerMute() {\n        if (!this.room?.remoteParticipants) {\n            throw new Error('Cannot toggle speaker mute.');\n        }\n        if (this.isSpeakerMuted) {\n            this.unmuteSpeaker();\n        }\n        else {\n            this.muteSpeaker();\n        }\n    }\n    async handleSocketMessage(event) {\n        const msg = JSON.parse(event.data);\n        // We attach the Livekit audio to an audio element so that we can mute the audio\n        // when the agent is not speaking. For now, disable Livekit's WebAudio mixing\n        // to avoid the audio playing twice:\n        //\n        // References:\n        //  - https://docs.livekit.io/guides/migrate-from-v1/#Javascript-Typescript\n        //  - https://github.com/livekit/components-js/pull/855\n        //\n        this.room = new livekit_client__WEBPACK_IMPORTED_MODULE_0__.Room({ webAudioMix: false });\n        this.room.on(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscribed, (track) => this.handleTrackSubscribed(track));\n        this.room.on(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.DataReceived, (payload, participant) => this.handleDataReceived(payload, participant));\n        const [track, _] = await Promise.all([(0,livekit_client__WEBPACK_IMPORTED_MODULE_0__.createLocalAudioTrack)(), this.room.connect(msg.roomUrl, msg.token)]);\n        this.localAudioTrack = track;\n        this.localAudioTrack.setAudioContext(this.audioContext);\n        if ([UltravoxSessionStatus.DISCONNECTED, UltravoxSessionStatus.DISCONNECTING].includes(this.status)) {\n            // We've been stopped while waiting for the mic permission (during createLocalTracks).\n            await this.disconnect();\n            return;\n        }\n        this.audioContext.resume();\n        this.audioElement.play();\n        if (this.localAudioTrack.mediaStream) {\n            this.micSourceNode = this.audioContext.createMediaStreamSource(this.localAudioTrack.mediaStream);\n        }\n        const opts = { name: 'audio', simulcast: false, source: livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone };\n        this.room.localParticipant.publishTrack(this.localAudioTrack, opts);\n        this.setStatus(UltravoxSessionStatus.IDLE);\n    }\n    async handleSocketClose(event) {\n        await this.disconnect();\n    }\n    async disconnect() {\n        this.setStatus(UltravoxSessionStatus.DISCONNECTING);\n        this.localAudioTrack?.stop();\n        this.localAudioTrack = undefined;\n        await this.room?.disconnect();\n        this.room = undefined;\n        this.socket?.close();\n        this.socket = undefined;\n        this.micSourceNode?.disconnect();\n        this.micSourceNode = undefined;\n        this.agentSourceNode?.disconnect();\n        this.agentSourceNode = undefined;\n        this.audioElement.pause();\n        this.audioElement.srcObject = null;\n        this.setStatus(UltravoxSessionStatus.DISCONNECTED);\n    }\n    handleTrackSubscribed(track) {\n        const audioTrack = track;\n        audioTrack.attach(this.audioElement);\n        if (track.mediaStream) {\n            this.agentSourceNode = this.audioContext.createMediaStreamSource(track.mediaStream);\n        }\n        if (this.delayedSpeakingState) {\n            this.delayedSpeakingState = false;\n            this.setStatus(UltravoxSessionStatus.SPEAKING);\n        }\n    }\n    setStatus(status) {\n        if (this._status === status) {\n            return;\n        }\n        this._status = status;\n        this.dispatchEvent(new UltravoxSessionStatusChangedEvent());\n    }\n    sendData(obj) {\n        this.room?.localParticipant.publishData(this.textEncoder.encode(JSON.stringify(obj)), { reliable: true });\n    }\n    handleDataReceived(payload, _participant) {\n        const msg = JSON.parse(this.textDecoder.decode(payload));\n        if (msg.type === 'state') {\n            const newState = msg.state;\n            if (newState === UltravoxSessionStatus.SPEAKING && this.agentSourceNode === undefined) {\n                // Skip the first speaking state, before we've attached the audio element.\n                // handleTrackSubscribed will be called soon and will change the state.\n                this.delayedSpeakingState = true;\n            }\n            else {\n                this.setStatus(newState);\n            }\n        }\n        else if (msg.type === 'transcript') {\n            const medium = msg.transcript.medium == 'voice' ? Medium.VOICE : Medium.TEXT;\n            const transcript = new Transcript(msg.transcript.text, msg.transcript.final, Role.USER, medium);\n            this.addOrUpdateTranscript(transcript);\n        }\n        else if (msg.type === 'voice_synced_transcript' || msg.type == 'agent_text_transcript') {\n            const medium = msg.type == 'agent_text_transcript' ? Medium.TEXT : Medium.VOICE;\n            if (msg.text != null) {\n                const newTranscript = new Transcript(msg.text, msg.final, Role.AGENT, medium);\n                this.addOrUpdateTranscript(newTranscript);\n            }\n            else if (msg.delta != null) {\n                const lastTranscript = this._transcripts.length ? this._transcripts[this._transcripts.length - 1] : undefined;\n                if (lastTranscript && lastTranscript.speaker == Role.AGENT) {\n                    const newTranscript = new Transcript(lastTranscript.text + msg.delta, msg.final, Role.AGENT, medium);\n                    this.addOrUpdateTranscript(newTranscript);\n                }\n            }\n        }\n        else if (msg.type == 'client_tool_invocation') {\n            this.invokeClientTool(msg.toolName, msg.invocationId, msg.parameters);\n        }\n        else if (this.experimentalMessages) {\n            this.dispatchEvent(new UltravoxExperimentalMessageEvent(msg));\n        }\n    }\n    addOrUpdateTranscript(transcript) {\n        if (this._transcripts.length) {\n            const lastTranscript = this._transcripts[this._transcripts.length - 1];\n            if (lastTranscript && !lastTranscript.isFinal && transcript.speaker === lastTranscript.speaker) {\n                this._transcripts[this._transcripts.length - 1] = transcript;\n            }\n            else {\n                this._transcripts.push(transcript);\n            }\n        }\n        else {\n            this._transcripts.push(transcript);\n        }\n        this.dispatchEvent(new UltravoxTranscriptsChangedEvent());\n    }\n    invokeClientTool(toolName, invocationId, parameters) {\n        const tool = this.registeredTools.get(toolName);\n        if (!tool) {\n            this.sendData({\n                type: 'client_tool_result',\n                invocationId,\n                errorType: 'undefined',\n                errorMessage: `Client tool ${toolName} is not registered (TypeScript client)`,\n            });\n            return;\n        }\n        try {\n            const result = tool(parameters);\n            if (result instanceof Promise) {\n                result\n                    .then((result) => this.handleClientToolResult(invocationId, result))\n                    .catch((error) => this.handleClientToolFailure(invocationId, error));\n            }\n            else {\n                this.handleClientToolResult(invocationId, result);\n            }\n        }\n        catch (e) {\n            this.handleClientToolFailure(invocationId, e);\n        }\n    }\n    handleClientToolResult(invocationId, result) {\n        if (typeof result === 'string') {\n            this.sendData({ type: 'client_tool_result', invocationId, result });\n        }\n        else {\n            const resultString = result.result;\n            const responseType = result.responseType;\n            if (typeof resultString !== 'string' || typeof responseType !== 'string') {\n                this.sendData({\n                    type: 'client_tool_result',\n                    invocationId,\n                    errorType: 'implementation-error',\n                    errorMessage: 'Client tool result must be a string or an object with string \"result\" and \"responseType\" properties.',\n                });\n            }\n            else {\n                this.sendData({ type: 'client_tool_result', invocationId, result: resultString, responseType });\n            }\n        }\n    }\n    handleClientToolFailure(invocationId, error) {\n        this.sendData({\n            type: 'client_tool_result',\n            invocationId,\n            errorType: 'implementation-error',\n            errorMessage: error instanceof Error ? error.message : undefined,\n        });\n    }\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ultravox-client@0.3.2/node_modules/ultravox-client/dist/esm/index.js\n");

/***/ })

};
;